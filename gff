#!/usr/bin/perl
#
use Curses;
#
# Idee  : 11.11.1998 (beim Schreiben des x-ten shell Scriptes fuer ifcico)
# Beginn: 13.11.1998 
# 
# 27.11.98 v0.01b   (um 03:42)
# 30.11.98 v0.02b   (20:23)     Announce in der LINUX.DEVELOP.GER
#
# Bugs / Tips / Anregungen / Vorschlaege an: 
# Thomas Koch@2:2437/530 oder
# no-return@gmx.net
#  
###############################################################################
# Pfad der Konfigurationsdatei                                                #
$config        = "/fido/etc/gff.cfg";                                         #
#                                                                             #
###############################################################################
#
###############################################################################
# Spezielle Variablen, vorsichtig!! Nicht veraendern!!                        #
# DON'T CHANGE IT!!                                                           #
#                                                                             #
$logfilerl  = "1";                                                            #
$lcalls     = "300";                                                          #
$debugmode  = "jup";                                                          #
$zz=0;                                                                        #
$fehler=0;                                                                    #
$dley=10;
#                                                                             #
###############################################################################
###############################################################################                                                                                                                                            
                                                                                                                                                                                   $version="0.02b";
#

###############################################################################
# Pruefe, wer sich ewig bindet....

sub schaumamal {

if($_[1] =~ /r/) {
  if( -r "$_[0]") { $ok=1; } 
    else {
    print "$_[0] ist nicht lesbar!\n"; 
    $fehler="1";
  }
}

if($_[1] =~ /x/) {
  if( -x "$_[0]") { $ok=1; } 
    else {
    print "$_[0] ist nicht ausfuehrbar!\n"; 
    $fehler="1";
  }
}

if($_[1] =~ /d/) {
  if( -d "$_[0]") { $ok=1; } 
    else {
    print "Das Verzeichnis $_[0] ist nicht vorhanden!\n"; 
    $fehler="1";
  }
}

if($_[1] =~ /w/) {
  if( -w "$_[0]") { $ok=1; } 
    else {
    print "$_[0] ist nicht schreibbar!\n"; 
    $fehler="1";
  }
}

}


###############################################################################
# 

sub hmpf {

print "Die Einstellungen in der $config sind fehlerhaft !!!($_[0])!!!\n";

$fehler="1";

}


###############################################################################
# 

sub config_auslesen {

open(CFG, "$config") || die "Kann die Konfigurationsdatei $config nicht oeffnen!\n";

while(<CFG>) {
  
  if(/#/) { next; }     
  if(/BILDSCHIRMMODUS/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $bsmodus=$s[1]; }
  if(/SYSTEMNAME/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $boxname=$s[1]; }
  if(/SYSTEMART/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $systemart=$s[1]; }
  if(/FTNADDRESS/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $ftnaddress=$s[1]; }
  if(/FTNUPLINK/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $ftnuplink=$s[1]; }     
  if(/TOSSCOMMAND/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $tosscommand=$s[1]; }
  if(/IFCONFIG/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $ifconfig=$s[1]; }
  if(/IFCICO/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $ifcicocmd=$s[1]; }
  if(/IFLOG/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $iflog=$s[1]; }
  if(/IFSTAT/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $ifstat=$s[1]; }
  if(/FTNOUTBOUND/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $ftnoutbound=$s[1]; }
  if(/FTNINBOUND/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $ftninbound=$s[1]; }
  if(/USEAUTOTOSS/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $useautotoss=$s[1]; }

  if(/MAILREADER/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $mailreader=$s[1]; }
  if(/TMPVZ/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $tmpvz=$s[1]; }  
  if(/BIGLOGS/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $biglogs=$s[1]; }

  # daily
  
  if(/SYSTEMLOGFILE/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $logfile=$s[1]; }
  if(/OUTPKT/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $outpkt=$s[1]; }
  if(/FGATELOGFILE/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $fgatelogfile=$s[1]; }
  if(/DAILYLOGFILE/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $dailylogfile=$s[1]; }
  if(/ABSENDERAKA/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $absenderaka=$s[1]; }
  if(/EMPFAENGERAKA/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $empfaengeraka=$s[1]; }
  if(/EMPFAENGER/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $empfaenger=$s[1]; }
  if(/TITEL/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $titel=$s[1]; }
  if(/BRETT/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $brett=$s[1]; }
  if(/WRITEEMPATH/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $writeem=$s[1]; }
  if(/TESTMODE/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $testmode=$s[1]; }
  if(/RFCMAIL/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $rfcmail=$s[1]; }
  if(/DAILYTIME/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $dailytime=$s[1]; }
  if(/DAILYUSE/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $dailyuse=$s[1]; }
  if(/DAILYLOG/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $dailylog=$s[1]; }
  if(/SEND_RFC_MAIL/) { @s=split(/\"/, $_); $s[1] =~ s/\"//g; $send_rfc_mail=$s[1]; }
}

#print "$boxname\n";      print "$ftnaddress\n";  print "$ftnuplink\n";
#print "$tosscommand\n";  print "$ifreq\n";       print "$ifconfig\n";
#print "$ifcicocmd\n";    print "$iflog\n";       print "$ifstat\n";
#print "$ftnoutbound\n";  print "$mailreader\n";  print "$tmpvz\n";
#
#print "$logfile\n";      print "$outpkt\n";      print "$fgatelogfile\n";
#print "$dailylogfile\n"; print "$absenderaka\n"; print "$empfaengeraka\n";
#print "$empfaenger\n";   print "$titel\n";       print "$brett\n";
#print "$writeem\n";      print "$testmode\n";    print "$rfcempfaenger\n";
#print "$dailytime\n";    print "$dailyuse\n";

if($bsmodus       eq "") { hmpf("BILDSCHIRMMODUS")}
if($boxname       eq "") { hmpf("SYSTEMNAME");    }
if($systemart     eq "") { hmpf("SYSTEMART");     }
if($ftnaddress    eq "") { hmpf("FTNADDRESS");    }
if($ftnuplink     eq "") { hmpf("FTNUPLINK");     }
if($tosscommand   eq "") { hmpf("TOSSCOMMAND");   }
if($ifconfig      eq "") { hmpf("IFCONFIG");      }
if($ifcicocmd     eq "") { hmpf("IFCICOCMD");     }
if($iflog         eq "") { hmpf("IFLOG");         }
if($ifstat        eq "") { hmpf("IFSTAT");        }
if($ftnoutbound   eq "") { hmpf("FTNOUTBOUND");   }
if($ftninbound    eq "") { hmpf("FTNINBOUND");    }
if($mailreader    eq "") { hmpf("MAILREADER");    }
if($tmpvz         eq "") { hmpf("TMPVZ");         }
if($biglogs       eq "") { hmpf("BIGLOGS");       }
if($useautotoss   eq "") { hmpf("USEAUTOTOSS");   }
  
if($logfile       eq "") { hmpf("LOGFILE");       }
if($outpkt        eq "") { hmpf("OUTPKT");        }
if($fgatelogfile  eq "") { hmpf("FGATELOGFILE");  }
if($dailylogfile  eq "") { hmpf("DAILYLOGFILE");  }
if($absenderaka   eq "") { hmpf("ABSENDERAKA");   }
if($empfaengeraka eq "") { hmpf("EMPFAENGERAKA"); }
if($empfaenger    eq "") { hmpf("EMPFAENGER");    }
if($titel         eq "") { hmpf("TITEL");         }
if($brett         eq "") { hmpf("BRETT");         }
if($writeem       eq "") { hmpf("WRITEEM");       }
if($testmode      eq "") { hmpf("TESTMODE");      }
if($rfcmail       eq "") { hmpf("RFCMAIL");       }
if($dailytime     eq "") { hmpf("DAILYTIME");     }
if($dailyuse      eq "") { hmpf("DAILYUSE");      }
if($dailylog      eq "") { hmpf("DAILYLOG");      }


# gff
schaumamal("$tosscommand", "rx");
schaumamal("$ifconfig", "r");
schaumamal("$ifcicocmd", "rx");
schaumamal("$iflog", "r");
schaumamal("$ifstat", "rx");
schaumamal("$ftnoutbound", "dw");
schaumamal("$ftninbound", "dr");
schaumamal("$mailreader", "rx");
schaumamal("$tmpvz", "drw");

# daily
if($dailyuse eq "1") {
  schaumamal("$fgatelogfile", "r");
  schaumamal("$dailylogfile", "rw");
  schaumamal("$writeem", "rx");
}

if($fehler eq "1") { 
  print "Exit.\n"; 
  exit(100); 
}

}


###############################################################################
# Bildaufbau

sub machma {
 
initscr();

&color_pairs;

local($dtext) = "#  Fido  Hilfe    (F10 = Menu)";


attron(COLOR_PAIR(1));
addstr(stdscr, 0, 0, "                                                                                ");
addstr(stdscr, 0, 1, "$boxname ($ftnaddress)");

if($bsmodus eq 0) {
  addstr(stdscr, 24, 0, "                                                                                ");
  addstr(stdscr, 24, 1, "$dtext");
  $logwin = newwin(17, 80, 7, 0);
  attron(COLOR_PAIR(4));
  move(6, 0);
  if($systemart eq 0) {
    $lcallwin = newwin(5, 38, 1, 0);
    $licallwin = newwin(5, 39, 1, 39);
    for($i=0; $i < 38; $i++) { addch(ACS_HLINE); }
    addch(ACS_BTEE); 
    for($i=39; $i < 79; $i++) { addch(ACS_HLINE); }
    for($i=1; $i < 6; $i++) { addch($i, 38, ACS_VLINE); }
  } elsif($systemart eq 1) {
    for($i=0; $i < 79; $i++) { addch(ACS_HLINE); }
    $lcallwin = newwin(5, 79, 1, 0);
  }
} else {
  addstr(stdscr, 49, 0, "                                                                                ");
  addstr(stdscr, 49, 1, "$dtext");
  $logwin = newwin(36, 80, 13, 0);
  refresh($logwin);
  attron(COLOR_PAIR(4));
  move(12, 0);
  if($systemart eq 0) {
    $lcallwin = newwin(10, 38, 1, 0);
    $licallwin = newwin(10, 39, 1, 39);
    for($i=0; $i < 38; $i++) { addch(ACS_HLINE); }
    addch(ACS_BTEE); 
    for($i=39; $i < 79; $i++) { addch(ACS_HLINE); }
    for($i=1; $i < 12; $i++) { addch($i, 38, ACS_VLINE); }
  } elsif($systemart eq 1) {
    for($i=0; $i < 79; $i++) { addch(ACS_HLINE); }
    $lcallwin = newwin(10, 79, 1, 0);
  }
}


attron(COLOR_PAIR(1)); 

refresh();

}


###############################################################################
# Farbendefinition

sub color_pairs {

start_color();

if($bw ne 1) {
  init_pair(1, COLOR_WHITE, COLOR_BLUE);
  init_pair(2, COLOR_WHITE, COLOR_BLACK);
  init_pair(3, COLOR_CYAN, COLOR_BLACK);
  init_pair(4, COLOR_MAGENTA, COLOR_BLACK);
  init_pair(5, COLOR_GREEN, COLOR_BLACK);
  init_pair(6, COLOR_WHITE, COLOR_BLUE);
  init_pair(7, COLOR_BLUE, COLOR_WHITE);
  init_pair(8, COLOR_BLACK, COLOR_WHITE);
  init_pair(9, COLOR_WHITE, COLOR_BLUE);
} else {
  init_pair(1, COLOR_BLACK, COLOR_GREEN);
  init_pair(2, COLOR_WHITE, COLOR_BLACK);
  init_pair(3, COLOR_CYAN, COLOR_BLACK);
  init_pair(4, COLOR_WHITE, COLOR_BLACK);
  init_pair(5, COLOR_GREEN, COLOR_BLACK);
  init_pair(6, COLOR_WHITE, COLOR_BLUE);
  init_pair(7, COLOR_BLUE, COLOR_WHITE);
  init_pair(8, COLOR_BLACK, COLOR_WHITE);
  init_pair(9, COLOR_WHITE, COLOR_BLACK);
}
  

}


###############################################################################
# hline

sub hline {

move($_[0], $_[2], 0);
addch($_[0], ACS_LTEE);

for($i=0; $i < $_[1]; $i++) {
   addch($_[0], ACS_HLINE);
}

addch($_[0], ACS_RTEE);
   
}


###############################################################################
# Scrollbalken

sub sbalk {

if($_[4] eq 1 || $_[4] eq -1) {
  attron($_[0], COLOR_PAIR(9));
}

$xlaenge=$_[1];

while(length($xlaenge) < $_[6]) {
  $xlaenge=$xlaenge . " ";   
}

addstr($_[0], $_[2], $_[3], "$xlaenge");

attron($_[0], COLOR_PAIR(7));

$ylaenge=$_[5];

while(length($ylaenge) < $_[6]) {
     $ylaenge=$ylaenge . " ";
}

if($_[5] ne "0" && $_[4] eq 1) {
  $u=$_[2] - 1;
  addstr($_[0], $u, $_[3], "$ylaenge");
} else {
  $u=$_[2] + 1;
  addstr($_[0], $u, $_[3], "$ylaenge");
}

}


###############################################################################
# Fido Window

sub mfwin { 

$nach_rechts=0; $nach_links=0; $aktion="";

if($bsmodus eq 0) {
  $fwin=newwin(9, 23, 15, 3);
} else {
  $fwin=newwin(9, 23, 40, 3);
}
 
attron($fwin, COLOR_PAIR(7));
addstr($fwin, "                                                                                                                                                                                          ");

$mfwin[1]="Files requesten...";
$mfwin[2]="Outbound Manager...";
$mfwin[3]="Mailreader starten";
$mfwin[4]="Logfile scrollen";
$mfwin[5]="Boss anrufen";
$mfwin[6]="Direktanruf...";
$mfwin[7]="Tosser starten";

sbalk($fwin, $mfwin[1], 1, 1, 1, 0, 21);
sbalk($fwin, $mfwin[2], 2, 1, 0, 0, 21);
sbalk($fwin, $mfwin[3], 3, 1, 0, 0, 21);
sbalk($fwin, $mfwin[4], 4, 1, 0, 0, 21);
sbalk($fwin, $mfwin[5], 5, 1, 0, 0, 21);
sbalk($fwin, $mfwin[6], 6, 1, 0, 0, 21);
sbalk($fwin, $mfwin[7], 7, 1, 0, 0, 21);


attron($fwin, COLOR_PAIR(8));

box($fwin, 0, 0);
refresh($fwin); 

$z=1;
for($i=0; $i = 1; $ii++) {

   $ch = getch();
   
   if($ch == KEY_DOWN || $ch == KEY_UP || $ch == KEY_LEFT || $ch == KEY_RIGHT) {
     if($ch == KEY_DOWN) {
       if($z ne 7) {
         $z++;
       }
       $n=$z - 1;
       sbalk($fwin, $mfwin[$z], $z, 1, 1, $mfwin[$n], 21);
     }
   
     if($ch == KEY_UP) {
       if($z ne 1) { 
          $z--;
       }
       $n=$z + 1;
       sbalk($fwin, $mfwin[$z], $z, 1, -1, $mfwin[$n], 21);
     }    

     if($ch == KEY_LEFT) {
       $window=0;
       last;
     }
   
     if($ch == KEY_RIGHT) {
       $window=2;
       last;
     }
   } else {
   
     $zn = unpack("C", $ch);
         
     if($zn eq 27) {
       $raushier=1;
       last;
     }

     if($zn eq 10) {
       $aktion=$mfwin[$z];
       $raushier=1;
       last;
     }
   }

refresh($fwin);

}

}


###############################################################################
# rauten Window

sub mrwin {

$nach_rechts=0; $nach_links=0; $aktion="";

if($bsmodus eq 0) {
  $rwin=newwin(6, 24, 18, 0);
} else {
  $rwin=newwin(6, 24, 43, 0);
}  

attron($rwin, COLOR_PAIR(7));
addstr($rwin, "                                                                                                                                                                                          ");

$mrwin[1]="Ueber...";
$mrwin[2]="Desktop neu zeichnen";
$mrwin[3]="Zeilenmodus 25/50";
$mrwin[4]="Beenden";

sbalk($rwin, $mrwin[1], 1, 1, 1, 0, 22);
sbalk($rwin, $mrwin[2], 2, 1, 0, 0, 22);
sbalk($rwin, $mrwin[3], 3, 1, 0, 0, 22);
sbalk($rwin, $mrwin[4], 4, 1, 0, 0, 22);

attron($rwin, COLOR_PAIR(8));

box($rwin, 0, 0);
refresh($rwin); 

$z=1;
for($i=0; $i = 1; $ii++) {

   $ch = getch();

   if($ch == KEY_DOWN || $ch == KEY_UP || $ch == KEY_LEFT || $ch == KEY_RIGHT) {
     if($ch == KEY_DOWN) {
       if($z ne 4) {
         $z++;
       }
       $n=$z - 1;
       sbalk($rwin, $mrwin[$z], $z, 1, 1, $mrwin[$n], 22);
     }
   
     if($ch == KEY_UP) {
       if($z ne 1) { 
          $z--;
       }
       $n=$z + 1;
       sbalk($rwin, $mrwin[$z], $z, 1, -1, $mrwin[$n], 22);
     }   

     if($ch == KEY_LEFT) {
       $window=0;
     }
   
     if($ch == KEY_RIGHT) {
       $window=1;
       last;
     }
   } else {
  
     $zn = unpack("C", $ch);
   
     if($zn eq 27) {
       $raushier=1;
       last;
     }

     if($zn eq 10) {
       $aktion=$mrwin[$z];
       $raushier=1;
       last;
     }
   }

refresh($rwin);

}

}


###############################################################################
# 

sub mhwin { 

if($bsmodus eq 0) {
  $hwin=newwin(5, 22, 19, 9);
} else {
  $hwin=newwin(5, 22, 44, 9);
}

attron($hwin, COLOR_PAIR(7));
addstr($hwin, "                                                                                                                                                                                          ");

$mhwin[1]="Was machemer";
$mhwin[2]="den hier";
$mhwin[3]="hin?";

sbalk($hwin, $mhwin[1], 1, 1, 1, 0, 20);
sbalk($hwin, $mhwin[2], 2, 1, 0, 0, 20);
sbalk($hwin, $mhwin[3], 3, 1, 0, 0, 20);

attron($hwin, COLOR_PAIR(8));

box($hwin, 0, 0);
refresh($hwin); 

$z=1;
for($i=0; $i = 1; $ii++) {

   $ch = getch();

   if($ch == KEY_DOWN || $ch == KEY_UP || $ch == KEY_LEFT || $ch == KEY_RIGHT) {
   if($ch == KEY_DOWN) {
     if($z ne 3) {
       $z++;
     }
     $n=$z - 1;
     sbalk($hwin, $mhwin[$z], $z, 1, 1, $mhwin[$n], 20);
   }
   
   if($ch == KEY_UP) {
     if($z ne 1) { 
        $z--;
     }
     $n=$z + 1;
     sbalk($hwin, $mhwin[$z], $z, 1, -1, $mhwin[$n], 20);
   }   

     if($ch == KEY_LEFT) {
       $window=1;
       last; 
     }
   
     if($ch == KEY_RIGHT) {
       $nach_rechts=0;
#      last;
     } 
   } else {

     $zn = unpack("C", $ch);

     if($zn eq 27) {
       $raushier=1;
       last;
     }

     if($zn eq 10) {
       $aktion=$mhwin[$z];
       $raushier=1;
       last;
     }
   }

refresh($hwin);

}

}


###############################################################################
#

sub menu {

$raushier=0;
mrwin;

while($raushier ne 1) {

     if($window eq 0) {
       touchwin($logwin);
       refresh($logwin);
       mrwin;
       next;
     }

     if($window eq 1) {
       touchwin($logwin);
       refresh($logwin);
       mfwin;
       next;
     }

     if($window eq 2) {
       touchwin($logwin);
       refresh($logwin);
       mhwin;
       next;
     }
}

# #
if($aktion eq "Beenden") { &ausgang }
if($aktion eq "Desktop neu zeichnen") { &neuaufbau }
if($aktion eq "Zeilenmodus 25/50") { &zeilenmodus_umschalten }

# Fido
if($aktion eq "Files requesten...") { &request }
if($aktion eq "Outbound Manager...") { &outbm }
if($aktion eq "Mailreader starten") { &mailreader_go }
if($aktion eq "Logfile scrollen") { &iflogfile_scrollen }
if($aktion eq "Boss anrufen") { &poll_uplink }
if($aktion eq "Direktanruf...") { &call_node }
if($aktion eq "Tosser starten") { &autotoss }

# Hilfe

touchwin($logwin);
refresh($logwin);

}


###############################################################################
# automatisches Tossen

sub autotoss {

$toss_mich=0;

@PKT=""; @pkt=""; @MO0=""; @mo0=""; @TU0=""; @tu0=""; @WE0=""; @we0="";
@TH0=""; @th0=""; @FR0=""; @fr0=""; @SA0=""; @sa0=""; @SU0=""; @su0=""; 

@PKT=glob(<$ftninbound/*.PKT>); if($PKT[0] ne "") { $toss_mich=1; }
@pkt=glob(<$ftninbound/*.pkt>); if($pkt[0] ne "") { $toss_mich=1; }
@MO0=glob(<$ftninbound/*.MO*>); if($MO0[0] ne "") { $toss_mich=1; }
@mo0=glob(<$ftninbound/*.mo*>); if($mo0[0] ne "") { $toss_mich=1; }
@TU0=glob(<$ftninbound/*.TU*>); if($TU0[0] ne "") { $toss_mich=1; }
@tu0=glob(<$ftninbound/*.tu*>); if($tu0[0] ne "") { $toss_mich=1; }
@WE0=glob(<$ftninbound/*.WE*>); if($WE0[0] ne "") { $toss_mich=1; }
@we0=glob(<$ftninbound/*.we*>); if($we0[0] ne "") { $toss_mich=1; }
@TH0=glob(<$ftninbound/*.TH*>); if($TH0[0] ne "") { $toss_mich=1; }
@th0=glob(<$ftninbound/*.th*>); if($th0[0] ne "") { $toss_mich=1; }
@FR0=glob(<$ftninbound/*.FR*>); if($FR0[0] ne "") { $toss_mich=1; }
@fr0=glob(<$ftninbound/*.fr*>); if($fr0[0] ne "") { $toss_mich=1; }
@SA0=glob(<$ftninbound/*.SA*>); if($SA0[0] ne "") { $toss_mich=1; }
@sa0=glob(<$ftninbound/*.sa*>); if($sa0[0] ne "") { $toss_mich=1; }
@SU0=glob(<$ftninbound/*.SU*>); if($SU0[0] ne "") { $toss_mich=1; }
@su0=glob(<$ftninbound/*.su*>); if($su0[0] ne "") { $toss_mich=1; }


if($toss_mich eq 1) {
  if(-e "$tmpvz/gff.bsy") {
    $nulliger=0;
  } else {
    logger("Tosse...");
    if($bsmodus eq 0) {
      $tosswin = newwin(3, 12, 8, 32);
    } else {
      $tosswin = newwin(3, 12, 14, 32);
    }
    
    attron($tosswin, COLOR_PAIR(1));
    box($tosswin, 0, 0);
    addstr($tosswin, 1, 1, " Tosse... ");

    refresh($tosswin);
    system("$tosscommand >/dev/null 2>/dev/null");
    touchwin($logwin);
    refresh($logwin); 
  }
} 

}


###############################################################################
# Request files...

sub reqfile {

if($_[0] =~ /\d+:\d+\/\d+/) {
  ($zone, $address) = split(/:/, $_[0]);
  $req = sprintf("%04x%04x", split(/\//, $address));
  if($zone eq 2) { 
    $reqfile="$ftnoutbound/outbound/$req.req";
  } else {
    $ooutbound = sprintf("%03x", $zone);
    $reqfile="$ftnoutbound/outbound.$ooutbound/$req.req"; 
  }
}

if( -e "$reqfile") {
  open(REQFILE, ">>$reqfile");
  print REQFILE "$_[1]\n";
  close(REQFILE);
} else {
  open(REQFILE, ">$reqfile");
  print REQFILE "$_[1]\n";
  close(REQFILE);
}

}


###############################################################################
#

sub hex2dec {

$net=hex(substr($_[0], 0, 4));
$node=hex(substr($_[0], 4, 4));

$_[1]="$net/$node";

}


###############################################################################
#

sub additem {

$fragwin=newwin(6, 20, 4, 4);
attron($fragwin, COLOR_PAIR(8));
addstr($fragwin




}


###############################################################################
#

sub outbm {

local(@files, @flowfiles, @pntvz, @pntfiles);

eval { keypad(1) };

@files=glob("$ftnoutbound/outbound/*.*");

for $file (@files) {
   ($name, $ext) = split(/\./, $file);
   if($ext =~ /flo|clo|dlo|ilo|hlo|req/i) {
     ($pfad, $name)=split(/$ftnoutbound\/outbound/, $file); $name =~ s/\///;
     push(@flowfiles, $name); 
   }
   if($ext =~ /pnt/i) { push(@pnt, $file); }
}

$zone=2;

for(@flowfiles) { 
   ($name, $ext) = split(/\./, $_); 
   hex2dec($name, $dname);
   if($ext =~ /flo/i) { push(@outbound, "....N $zone:$dname"); }
   if($ext =~ /clo/i) { push(@outbound, "...C. $zone:$dname"); }
   if($ext =~ /hlo/i) { push(@outbound, "..H.. $zone:$dname"); }
   if($ext =~ /dlo/i) { push(@outbound, ".D... $zone:$dname"); }
   if($ext =~ /ilo/i) { push(@outbound, "I.... $zone:$dname"); }
   if($ext =~ /req/i) { push(@outbound, "....R $zone:$dname"); }
}


for $pntvz (@pnt) { 
   @s=split(/\//, $pntvz);
   for(@s) {
      if($_ =~ /\.pnt/i) {
        $_=~ s/\.pnt//i;
	hex2dec($_, $dnode);
      }
   }
   @pntfiles=glob("$pntvz/*.*");
   for(@pntfiles) { 
      ($pfad, $name)=split(/$pntvz/, $_); $name =~ s/\///;
      ($name, $ext)=split(/\./, $name);
      $pointnr=hex($name);
      if($ext =~ /flo/i) { push(@pv, "....N $zone:$dnode.$pointnr"); }
      if($ext =~ /clo/i) { push(@pv, "...C. $zone:$dnode.$pointnr"); }
      if($ext =~ /hlo/i) { push(@pv, "..H.. $zone:$dnode.$pointnr"); }
      if($ext =~ /dlo/i) { push(@pv, ".D... $zone:$dnode.$pointnr"); }
      if($ext =~ /ilo/i) { push(@pv, "I.... $zone:$dnode.$pointnr"); }
      if($ext =~ /req/i) { push(@pv, "....R $zone:$dnode.$pointnr"); }
   }     
}

$outbm = newwin(18, 40, 3, 19);
attron($outbm, COLOR_PAIR(8));
addstr($outbm
box($outbm, 0, 0);
addstr($outbm, 0, 11, " Outbound Manager ");
#refresh($outbm);

$laenge=@outbound;

$outbmwin[1]=".."; $z=2;
for($i=0; $i < $laenge; $i++) {
   $outbmwin[$z] = "$outbound[$i]"; $z++;
}

$laenge=@outbmwin;

sbalk($outbm, $outbmwin[1], 1, 1, 1, 0, 38);

for($i=2; $i < $laenge; $i++) {
   sbalk($outbm, $outbmwin[$i], $i, 1, 0, 0, 38);
}

refresh($outbm);

$z=1;
for($iii=0; $iii = 1; $ii++) {
   $ch = getch();
   if($ch == KEY_DOWN || $ch == KEY_UP || $ch == KEY_LEFT || $ch == KEY_RIGHT) {
   if($ch == KEY_DOWN) {
     if($z ne $laenge-1) {
       $z++;
     }
     $n=$z - 1;
     sbalk($outbm, $outbmwin[$z], $z, 1, 1, $outbmwin[$n], 38);
   }
   
   if($ch == KEY_UP) {
     if($z ne 1) { 
        $z--;
     }
     $n=$z + 1;
     sbalk($outbm, $outbmwin[$z], $z, 1, -1, $outbmwin[$n], 38);
   }   

   if($ch == KEY_LEFT) {
     $iii=1;
   }
  
   if($ch == KEY_RIGHT) {
     $iii=1;
   } 

   if($ch eq 331) { 
     additem;
   }
     
   } else {

   $zn = unpack("C", $ch);
   
   if($zn eq 27) {
     last;
   }

     if($zn eq 10) {
       $aktion=$outbmwin[$z];
       $iii=1
     }
   }
refresh($outbm);
}



}


###############################################################################
#

sub logger {

system("logger -p local0.info $_[0]");

}


###############################################################################
# Zeit holen

sub zeit_holen {

@Datum=""; @Uhr=""; @Uhrzeit=""; $zeit=""; $gestern=""; $akdat=""; $akdatg="";

$zeit  = time(); 
$zeit  = localtime($zeit);
@Datum = split(/ +/, $zeit); 

$gestern=$Datum[2] - 1;

if(length($Datum[2]) eq 1) {
  $grr="hmpf";
  $Datum[2]=" $Datum[2]";   
}

$akdat = "$Datum[1] $Datum[2]";
$akdatg= "$Datum[1] $gestern";

&translatemonth;

@Uhr = split(/ +/,$zeit);
@Uhrzeit = split(/:/,$Uhr[3]);

#$akdat = "$Uhr[0], der $Uhr[2] $Uhr[1] $Uhr[4] $Uhrzeit[0]:$Uhrzeit[1]"; 

$akzeitd = "$Uhrzeit[0]:$Uhrzeit[1]:$Uhrzeit[2]"; 
$akzeit = "$Uhrzeit[0]:$Uhrzeit[1]"; 

}


###############################################################################
# Spielerei

sub ringeldich {

$uhu++;
if($uhu == 0) { addstr(stdscr, 24, 71, "\/"); }
if($uhu == 1) { addstr(stdscr, 24, 71, "\-"); }
if($uhu == 2) { addstr(stdscr, 24, 71, "\\"); }
if($uhu == 3) { $uhu=0; addstr(stdscr, 24, 71, "|"); }
refresh();

}


###############################################################################
# 

sub l_up {

if($lineup != -$laenge) { $lineup--; 
  if($s[$lineup] ne "") { 
     move($logwin, 0, 0); 
     insdelln($logwin, 1);
     addstr($logwin, 0, 0, "$s[$lineup]"); 
  } else { beep; }
}    
if($lineup != -$laenge) { $line--; } 

}


###############################################################################
#

sub l_down {

if($s[$line] ne "") { 
  move($logwin, 0, 0); 
  deleteln($logwin);
  move($logwin, $_[0], 0);
  addstr($logwin, "$s[$line]");
} else { beep; }

if($line < $laenge) { $line++; $lineup++; }

}


###############################################################################
# 

sub iflogfile_scrollen {


local(@s, @v, @splitt, @splitte, $tmp);

#@s=""; @v=""; @splitt=""; @splitte=""; $tmp="";

open(IFLOG, "$iflog") || die "Konnte $iflog nicht oeffnen!\n";

if($bsmodus eq 0) {
  addstr(stdscr, 24, 77, "l");
} else {
  addstr(stdscr, 49, 77, "l");
}

refresh();

while (<IFLOG>) {
      if($biglogs eq 1) {
          if(/$akdat/) {
          if(/errno=5 : I\/O error/) { next; }
          if(/send_str error/)       { next; }
          if(/tcsetattr/)            { next; }
          if(/ got SIGHUP/)          { next; }
          if(/calls, maxrc/)         { next; }
          if(/zmodem send rc=0/)     { next; }
          if(/zmodem receive rc=0/)  { next; } 
          if(/ remote tag: /)        { next; }
	  if(/ remote timezone: /)   { next; }
	  if(/ remote     time: /)   { next; }
          if(/ options: Call /)      { next; }
          @v=split(/\x0A/, $_);
          @t=split(/ +/, $v[0]);
          if (/ zmodem send /) {
             @splitt=split(/\x0A/, $_);
     	     @splitte=split(/ +/, $splitt[0]);
   	     $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[9] $splitte[10] $splitte[11]";
	     $tmp =~ s/   //g;
	     push(@s, "$tmp\n");
             next;
          }        
          if (/ remote     uses:/) {
             @splitt=split(/\x0A/, $_);
             @splitte=split(/ +/, $splitt[0]);
	     $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[9] $splitte[10] $splitte[11] $splitte[12]";
	     $tmp =~ s/  //g;
	     push(@s, "$tmp\n");
             next;
          }
          if (/\@fidonet/)            { $_ =~ s/\@fidonet//; }
          if (/ bytes dated /) { 
             @splitt=split(/ bytes dated /, $_); 
             @splitte=split(/ +/, $splitt[0]);
   	     $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[7] $splitte[8] bytes";
	     $tmp =~ s/\x0A//g;
             if ($i=length($tmp) > 79) { 
	        while ($i=length($tmp) > 79) {
	              chop($tmp);
	        }
	     }
	     push(@s, "$tmp\n"); 
          }
          else {
               @splitt=split(/\x0A/, $_);
	       @splitte=split(/ +/, $splitt[0]);
  	       $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[7] $splitte[8] $splitte[9] $splitte[10] $splitte[11] $splitte[12] $splitte[13] $splitte[14] $splitte[15] $splitte[16] $splitte[17] $splitte[18] $splitte[19] $splitte[20] $splitte[21] $splitte[22] $splitte[23] $splitte[24] $splitte[25]";
               $tmp =~ s/\x0A//g;
   	       $tmp =~ s/   //g;
	       $tmp =~ s/\(update \(null\), password "\(null\)"\)//g;
               if ($i=length($tmp) > 79) { 
                  while ($i=length($tmp) > 79) {
	                chop($tmp);
    	          }
               }
	       push(@s, "$tmp\n");
  	       }
        }
      } else {
        if(/errno=5 : I\/O error/) { next; }
        if(/send_str error/)       { next; }
        if(/tcsetattr/)            { next; }
        if(/ got SIGHUP/)          { next; }
        if(/calls, maxrc/)         { next; }
        if(/zmodem send rc=0/)     { next; }
        if(/zmodem receive rc=0/)  { next; } 
        if(/ remote tag: /)        { next; }
        if(/ remote timezone: /)   { next; }
        if(/ remote     time: /)   { next; }
        if(/ options: Call /)      { next; }
        @v=split(/\x0A/, $_);
        @t=split(/ +/, $v[0]);
        if (/ zmodem send /) {
           @splitt=split(/\x0A/, $_);
     	   @splitte=split(/ +/, $splitt[0]);
   	   $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[9] $splitte[10] $splitte[11]";
	   $tmp =~ s/   //g;
	   push(@s, "$tmp\n");
           next;
        }        
        if (/ remote     uses:/) {
           @splitt=split(/\x0A/, $_);
           @splitte=split(/ +/, $splitt[0]);
	   $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[9] $splitte[10] $splitte[11] $splitte[12]";
	   $tmp =~ s/  //g;
	   push(@s, "$tmp\n");
           next;
        }
        if (/\@fidonet/)            { $_ =~ s/\@fidonet//; }
        if (/ bytes dated /) { 
           @splitt=split(/ bytes dated /, $_); 
           @splitte=split(/ +/, $splitt[0]);
   	   $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[7] $splitte[8] bytes";
	   $tmp =~ s/\x0A//g;
           if ($i=length($tmp) > 79) { 
	      while ($i=length($tmp) > 79) {
	            chop($tmp);
	      }
	   }
	   push(@s, "$tmp\n"); 
        }
        else {
           @splitt=split(/\x0A/, $_);
	   @splitte=split(/ +/, $splitt[0]);
  	   $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[7] $splitte[8] $splitte[9] $splitte[10] $splitte[11] $splitte[12] $splitte[13] $splitte[14] $splitte[15] $splitte[16] $splitte[17] $splitte[18] $splitte[19] $splitte[20] $splitte[21] $splitte[22] $splitte[23] $splitte[24] $splitte[25]";
           $tmp =~ s/\x0A//g;
   	   $tmp =~ s/   //g;
	   $tmp =~ s/\(update \(null\), password "\(null\)"\)//g;              
           if ($i=length($tmp) > 79) { 
              while ($i=length($tmp) > 79) {
	            chop($tmp);
    	      }
           }
	   push(@s, "$tmp\n");
  	   }
    }

}

$laenge=@s;
$z=0; 

if($bsmodus eq 0) {
  $sz=17;
  for($line=$laenge - $sz; $line < $laenge; $line++) {
     addstr($logwin, $z, 0, "$s[$line]"); $z++;  
  }
  addstr(stdscr, 24, 77, " ");
  $lineup=$line - 17; 
} else {
  $sz=36;
  for($line=$laenge - $sz; $line < $laenge; $line++) {
     addstr($logwin, $z, 0, "$s[$line]"); $z++;  
  }
  addstr(stdscr, 49, 77, " ");
  $lineup=$line - 36;
}


refresh();
refresh($logwin);

cbreak();
eval { keypad(1) };



for($ii=0; $ii = 1; $v=1)  {

   $ch = getch();

   if($ch == KEY_DOWN) { 
     if($bsmodus eq 0) {
       l_down(16);
     } else {
       l_down(35);
     }
   }
   if($ch == KEY_UP) { l_up; }

   # ESC
   if($ch == KEY_ABORT) { last; }

   # PUp
   if($ch eq "339") { 
     if($bsmodus eq 0) {
       for($iu=0; $iu < 16; $iu++) {
          l_up; 
       }
     } else {
       for($iu=0; $iu < 32; $iu++) {
          l_up; 
       }    
     }
   }

   # PDown
   if($ch eq "338") { 
     if($bsmodus eq 0) {
       for($iu=0; $iu < 16; $iu++) {
  	  l_down(16); 
       }
     } else {
       for($iu=0; $iu < 32; $iu++) {
     	  l_down(35);
       }  
     }
   }
   touchwin($logwin);
   refresh($logwin);
}


$z=0; 

if($bsmodus eq 0) {
  $sz=17;
  for($line=$laenge - $sz; $line < $laenge; $line++) {
     addstr($logwin, $z, 0, "$s[$line]"); $z++;
  }
} else {
  $sz=36;
  for($line=$laenge - $sz; $line < $laenge; $line++) {
     addstr($logwin, $z, 0, "$s[$line]"); $z++;
  }
}



touchwin($logwin);
refresh($logwin);

neuaufbau;

}


###############################################################################
# Request

sub request {

$files=""; $requestnow=0;

echo;

$reqwin = newwin(14, 40, 5, 19);
attron($reqwin, COLOR_PAIR(1));
addstr($reqwin
box($reqwin, 0, 0);
addstr($reqwin, 0, 15, " Request ");
addstr($reqwin, 1, 1, "Node: ");
hline($reqwin, 38, 2);
move(6, 26);
refresh($reqwin);
getstr($node);

if($node ne "" && $node =~ /\d+:\d+\/\d+/) {
  move(8, 21);
  refresh($reqwin);

  $z=3; $zz=8;
  for($nix=1; $iii = 2; $nix++) {
     addstr($reqwin, $z, 1, "$nix: ");
     move($zz, 23);
     refresh($reqwin);
     getstr($file);
     $z++; $zz++;
     if($file eq "") { last; }
     push(@files, "$file\r");
  } 

  clear($reqwin);

  $reqwin = newwin(5, 27, 9, 25);
  attron($reqwin, COLOR_PAIR(4));
  box($reqwin, 0, 0);
  hline($reqwin, 25, 2);

  attron($reqwin, COLOR_PAIR(2));
  addstr($reqwin, 1, 1, " Request sofort starten? ");
  addstr($reqwin, 3, 1, "                         ");
  attron($reqwin, COLOR_PAIR(6));
  addstr($reqwin, 3, 3, "< jau >");
  attron($reqwin, COLOR_PAIR(2));
  addstr($reqwin, 3, 17, "< noe >");
  refresh($reqwin);
  $requestnow=1;

  eval { keypad(1) };
  noecho();

  for($iii=0; $iii = 1; $zz++) {

     $ch=getch();

     if($ch == KEY_LEFT) {  
       attron($reqwin, COLOR_PAIR(6));
       addstr($reqwin, 3, 3, "< jau >");
       attron($reqwin, COLOR_PAIR(2));
       addstr($reqwin, 3, 17, "< noe >");
       $requestnow=1;
     }

     if($ch == KEY_RIGHT) { 
       attron($reqwin, COLOR_PAIR(2));
       addstr($reqwin, 3, 3, "< jau >");
       attron($reqwin, COLOR_PAIR(6));
       addstr($reqwin, 3, 17, "< noe >");
       $requestnow=0;
     }

     if($ch == KEY_RETURN) { last; }

     refresh($reqwin);
  
     }

for(@files) {   
   &reqfile($node, $_);
}

}

if($requestnow == 1) { 
  &convftn($node, $ftnnode);
  system("echo > $tmpvz/gff.bsy && $ifcicocmd -I$ifconfig -r 1 $ftnnode && rm -f $tmpvz/gff.bsy &");    
}

&neuaufbau;
&touchall("r");
noecho();

}


###############################################################################
#

sub touchall {

if($_[0] eq "r") {
  touchwin(stdscr);
}

refresh(stdscr);

touchwin($logwin);
refresh($logwin);

touchwin($lcallwin);
refresh($lcallwin);

if($systemart eq 0) {
  touchwin($licallwin);
  refresh($licallwin);
}

}


###############################################################################
# Bild-Neuaufbau

sub neuaufbau {


attron(COLOR_PAIR(4));

if($bsmodus eq 0) {
  move(6, 0);
  if($systemart eq 0) {
    for($i=0; $i < 38; $i++) { addch(ACS_HLINE); }
    addch(ACS_BTEE);
    for($i=40; $i < 79; $i++) { addch(ACS_HLINE); }
    for($i=1; $i < 6; $i++) { addch($i, 38, ACS_VLINE); }
  } elsif($systemart eq 1) {
    for($i=0; $i < 79; $i++) { addch(ACS_HLINE); }
  }  
} else {
  move(12, 0);
  if($systemart eq 0) {
    for($i=0; $i < 38; $i++) { addch(ACS_HLINE); }
    addch(ACS_BTEE);
    for($i=40; $i < 79; $i++) { addch(ACS_HLINE); }
    for($i=1; $i < 12; $i++) { addch($i, 38, ACS_VLINE); }
  } elsif($systemart eq 1) {
    for($i=0; $i < 79; $i++) { addch(ACS_HLINE); }
  }  
}
  

&touchall;

}


###############################################################################
# hilfe!

sub hilfe {

local(@helptext, $z);

$helptext[0]="c  Call Node";
$helptext[1]="d  Statistikmail erzeugen";
$helptext[2]="h  Hilfefenster";
$helptext[3]="l  iflog-file blaettern";
$helptext[4]="m  Mailreader starten";
$helptext[5]="n  Desktop neu zeichnen";
$helptext[6]="p  Poll Uplink";
$helptext[7]="r  Request files";
$helptext[8]="s  Outbound anzeigen";
$helptext[9]="x  Quit";
$helptext[11]="F10  Menu";



if($bsmodus eq 0) {

  $helpwin = subwin(21, 60, 2, 10);

  attron($helpwin, COLOR_PAIR(2));
  addstr($helpwin
  attron($helpwin, COLOR_PAIR(4));
  box($helpwin, 0, 0); 
  hline($helpwin, 58, 2);
  attron($helpwin, COLOR_PAIR(5));
  addstr($helpwin, 0, 26, " Hilfe ");
  attron($helpwin, COLOR_PAIR(3));
  
  local($z)=4;
  
  for(@helptext) {
     addstr($helpwin, $z, 2, "$_"); $z++;
  }
  refresh($helpwin);
  move(24, 79); 
  refresh();

} else {

  $helpwin = subwin(21, 60, 14, 10);

  attron($helpwin, COLOR_PAIR(2));
  addstr($helpwin
  attron($helpwin, COLOR_PAIR(4));
  box($helpwin, 0, 0); 
  hline($helpwin, 58, 2);
  attron($helpwin, COLOR_PAIR(5));
  addstr($helpwin, 0, 26, " Hilfe ");
  attron($helpwin, COLOR_PAIR(3));
  
  local($z)=4;
  
  for(@helptext) {
     addstr($helpwin, $z, 2, "$_"); $z++;
  }
  refresh($helpwin);
  move(49, 79);
  refresh();
}


getch;

clear($helpwin);
refresh($helpwin);

neuaufbau;

}


###############################################################################
# exit

sub ausgang {

clear(); 
refresh();
endwin();
exit(0);

}


###############################################################################
# startup

sub hello {

print "gff $version Graphisches Fido Frontend fuer Linux\n";
print "Written by Thomas Koch\n";
sleep (1);

}


###############################################################################
# call node

sub call_node {

echo;
$callwin = subwin(3, 20, 10, 28);
box($callwin, 0, 0);
addstr($callwin, 0, 5, " Addresse? ");
addstr($callwin, 1, 1, "                  ");
move($callwin, 1, 2);
move(11, 30);
refresh($callwin);
getstr($eingabe);
touchwin($logwin); refresh($logwin);

if($eingabe =~ /\d+:\d+\/\d+/) {
  &convftn($eingabe, $ausgabe);
  system("echo > $tmpvz/gff.bsy && $ifcicocmd -I$ifconfig -r 1 $ausgabe && rm -f $tmpvz/gff.bys &");
}


noecho;

}


###############################################################################
# logfiles (puh)

sub iflogfile_aufbereiten {

local(@iflines, @splitt, @splitte, $tmp);

$filenew=(-s "$iflog");

if($filenew ne $fileold || $_[0] eq "r") {

  if($bsmodus eq 0) {
    open (IFLOG, "tail --lines=40 $iflog |") || die "Konnte tail nicht korrekt ausfuehren";
  } else {
    open (IFLOG, "tail --lines=80 $iflog |") || die "Konnte tail nicht korrekt ausfuehren";
  }  
  while (<IFLOG>) {
        if (/errno=5 : I\/O error/) { next; }
        if (/send_str error/)       { next; }
        if (/tcsetattr/)            { next; }
        if (/ got SIGHUP/)          { next; }
        if (/calls, maxrc/)         { next; }
        if (/zmodem send rc=0/)     { next; }
        if (/zmodem receive rc=0/)  { next; }
        if(/ remote tag: /)         { next; }
        if(/ remote timezone: /)    { next; }
        if(/ remote     time: /)    { next; }
        if (/ options: Call /)      { next; }
        if (/ zmodem send /) {
           @splitt=split(/\x0A/, $_);
  	   @splitte=split(/ +/, $splitt[0]);
	   $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[9] $splitte[10] $splitte[11]";
	   $tmp =~ s/   //g;
	   push(@iflines, "$tmp\n");
           next;
        }        
        if (/ remote     uses:/) {
           @splitt=split(/\x0A/, $_);
           @splitte=split(/ +/, $splitt[0]);
	   $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[9] $splitte[10] $splitte[11] $splitte[12]";
	   $tmp =~ s/  //g;
	   push(@iflines, "$tmp\n");
           next;
        }
        if (/\@fidonet/)            { $_ =~ s/\@fidonet//; }
        if (/ bytes dated /) { 
           @splitt=split(/ bytes dated /, $_); 
           @splitte=split(/ +/, $splitt[0]);
	   $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[7] $splitte[8] bytes";
	   $tmp =~ s/\x0A//g;
           if ($i=length($tmp) > 79) { 
	      while ($i=length($tmp) > 79) {
	            chop($tmp);
	      }
	   }
	   push(@iflines, "$tmp\n"); }
        else {
             @splitt=split(/\x0A/, $_);
	     @splitte=split(/ +/, $splitt[0]);
 	     $tmp="$splitte[0] $splitte[1] $splitte[2] $splitte[5] $splitte[6] $splitte[7] $splitte[8] $splitte[9] $splitte[10] $splitte[11] $splitte[12] $splitte[13] $splitte[14] $splitte[15] $splitte[16] $splitte[17] $splitte[18] $splitte[19] $splitte[20] $splitte[21] $splitte[22] $splitte[23] $splitte[24] $splitte[25]";
             $tmp =~ s/\x0A//g;
	     $tmp =~ s/   //g;
	     $tmp =~ s/\(update \(null\), password "\(null\)"\)//g;
             if ($i=length($tmp) > 79) { 
                while ($i=length($tmp) > 79) {
	              chop($tmp);
    	        }
             }
	     push(@iflines, "$tmp\n");
  	     }
      
        }

  $laenge = @iflines;
  $z=$laenge - 2;

  $oo=0;

  
  if($bsmodus eq 0) {
    for ($i=$laenge - 17; $i < $laenge; $i++) {  
        addstr($logwin, $oo, 0, "$iflines[$i]"); 
        $oo++;
    }
  } else {
    for ($i=$laenge - 36; $i < $laenge; $i++) {  
        addstr($logwin, $oo, 0, "$iflines[$i]"); 
        $oo++;
    }
  }

  touchwin($logwin);
  refresh($logwin);
    
  close(IFLOG);
}


$fileold=(-s "$iflog");


}


###############################################################################
# Die schwachsinnige Internetschreibweise von fido Addressen (die ifcico
# benutzt) aendern

sub convftn {

@tmp=split(/:/, $_[0]);
@tmp1=split(/\//, $tmp[1]);

$_[1]="f$tmp1[1].n$tmp1[0].z$tmp[0].fidonet.org";

if($_[1] !~ /z2./) {
  $_[1] =~ s/.fidonet.org//;
}

}


###############################################################################
# show outbound

sub show_outbound { 

local(@outbound, $laenge);

open (IFSTAT, "$ifstat -I$ifconfig |") || die "Kann $ifstat nicht ausfuehren!";
while (<IFSTAT>) {
      push(@outbound, $_);
}      
$laenge = @outbound;

$outbwin = subwin(21, 60, 2, 10);
move($outbwin, 1, 1);
attron($outbwin, COLOR_PAIR(3));
addstr($outbwin
for ($i=1; $i < $laenge; $i++) {
    move($outbwin, $i, 1);
    addstr($outbwin, $outbound[$i]);
}

attron($outbwin, COLOR_PAIR(4));
box($outbwin, 0, 0);
attron($outbwin, COLOR_PAIR(5));
addstr($outbwin, 0, 25, " Outbound ");
attron($outbwin, COLOR_PAIR(4));
move(24, 79);
refresh($outbwin);

nodelay(0);
getch();
nodelay(1);

clear($outbwin);
refresh($outbwin);

neuaufbau;

}


###############################################################################
# poll uplink

sub poll_uplink {

&convftn($ftnuplink, $uplink);
system("echo > $tmpvz/gff.bsy && $ifcicocmd -I$ifconfig -r 1 $uplink && rm -f $tmpvz/gff.bsy &");

}


###############################################################################
# letzte (ausgehende) Anrufe einblenden

sub letzte_anrufe {

&zeit_holen;

local(@s, @iflogentrys, @sf, @r);

open (IFLOGFILE, "$iflog") || die "Kann $iflog nicht oeffnen!";
while (<IFLOGFILE>) {
      if (/$akdat/) { 
          if (/ calling /) {
             @s=split(/ +/, $_);
	     $s[6] =~ s/\@fidonet//;
	     $s[6] =~ s/\@linuxnet//;
	     @sf=split(/,/, "$s[7] $s[8] $s[9] $s[10] $s[11] $s[12] $s[13]");
	     $sf[0] =~ s/\(//; 
	     @r=split(/:/, $s[2]);
	     $tmp="$r[0]:$r[1] $s[6] ($sf[0])\n";
             push(@iflogentrys, $tmp);
          }
      }
}

move($lcallwin, 1, 1);
$laenge = @iflogentrys; $z=0;
attron($lcallwin, COLOR_PAIR(2));

if($bsmodus eq 0) {
  if($laenge > 5) {
    for($i=$laenge - 5; $i < $laenge; $i++) {
    addstr($lcallwin, $z, 0, "$iflogentrys[$i]");
    $z++;
    }
  } else {
    shift(@iflogentrys);
    for($i=0; $i < 5; $i++) {
    addstr($lcallwin, $z, 0, "$iflogentrys[$i]");
    $z++;
    }
  }
} else {
  if($laenge > 10) {
    for($i=$laenge - 10; $i < $laenge; $i++) {
     addstr($lcallwin, $z, 0, "$iflogentrys[$i]");
    $z++;
    }
  } else {
    shift(@iflogentrys);
    for($i=0; $i < 10; $i++) {
    addstr($lcallwin, $z, 0, "$iflogentrys[$i]");
    $z++;
    }
  }
}


attron($lcallwin, COLOR_PAIR(4));
touchwin($lcallwin);
refresh($lcallwin);

}


###############################################################################
# letzte Anrufe (eingehend) einblenden

sub letzte_i_anrufe {

local(@s, @pids, @t, @u, @v, @r, @iclogins, $found);

zeit_holen;

open(IFLOGFILE, "$iflog") || die "Konnte $iflog nicht oeffnen!\n";
while(<IFLOGFILE>) {
     if(/$akdat/) {
       push(@s, $_);
     }
}

for(@s) {
   if($found eq 1) {
     @t=split(/\[/, $_);
     @u=split(/\]/, $t[1]);  
     push(@pids, $u[0]);
     $found=0;
   }
   if(/Eingehender Anruf.../) {
     $found=1;
   }
}

$x=0; $icname="";

for $pid (@pids) {
    for $i (@s) {
        if($i =~ /\[$pid\]/) {
             if($i =~ /remote  address: 2:24/) {
	       if($grr eq "hmpf") {	       
                 @t=split(/ /, $i);
	         $t[9] =~ s/\@fidonet|\@Fidonet//;
	         @u=split(/\x0A/, $t[9]);
	         @v=split(/:/, $t[3]);
	         $address="$v[0]:$v[1]";
	       } else {
   	         @t=split(/ +/, $i);
	         $t[8] =~ s/\@fidonet|\@Fidonet//;
	         @u=split(/\x0A/, $t[8]);
   	         @v=split(/:/, $t[2]);
	         $address="$v[0]:$v[1]";

	       }
	     }
             if($i =~ /remote operator/) {
	       @r=split(/ +/, $i);
	       @t=""; @t=split(/\x0A/, $r[8]);
	       $icname="$address $r[7] $t[0] ($u[0])";
	     }
        }
    }
$iclogins[$x]=$icname; $x++;
}



$muell=shift(@iclogins); 

$y=0; $laenge=@iclogins; $x=0; $w=0;


if($bsmodus eq 0) {
  if($laenge > 5) {
    for($x=$laenge - 5; $x < $laenge; $x++) {
       addstr($licallwin, $w, 0, "$iclogins[$x]    "); 
        $w++;
    }
  } else {
    for($x=0; $x < 5; $x++) {
        addstr($licallwin, $w, 0, "$iclogins[$x]    "); 
        $w++;
    }
  }
} else {
  if($laenge > 10) {
    for($x=$laenge - 10; $x < $laenge; $x++) {
       addstr($licallwin, $w, 0, "$iclogins[$x]    "); 
        $w++;
    }
  } else {
    for($x=0; $x < 10; $x++) {
        addstr($licallwin, $w, 0, "$iclogins[$x]    "); 
        $w++;
    }
  }
}
  
touchwin($licallwin); 
refresh($licallwin);

close(IFLOGFILE);

}


###############################################################################
# Mailreader Starten

sub mailreader_go {

logger("starte Mailreader... \($mailreader\) &");

endwin();

system("setterm -cursor on");
system("$mailreader");
system("setterm -cursor off");

neuaufbau;

}


###############################################################################
# Monate  Englisch -=> Deutsch 

sub translatemonth {

$zeit =~ s/Mon/Montag/;
$zeit =~ s/Tue/Dienstag/;
$zeit =~ s/Wed/Mittwoch/;
$zeit =~ s/Thu/Donnerstag/;
$zeit =~ s/Fri/Freitag/;
$zeit =~ s/Sat/Samstag/;
$zeit =~ s/Sun/Sonntag/;
$zeit =~ s/Jan/Januar/;
$zeit =~ s/Feb/Februar/;
$zeit =~ s/Mar/Maerz/;
$zeit =~ s/Apr/April/;
$zeit =~ s/May/Mai/;
$zeit =~ s/Jun/Juni/;
$zeit =~ s/Jul/Juli/;
$zeit =~ s/Aug/August/;
$zeit =~ s/Sep/September/;
$zeit =~ s/Oct/Oktober/;
$zeit =~ s/Nov/November/; 
$zeit =~ s/Dec/Dezember/; 

}


###############################################################################
# Uhrzeit aktualisieren

sub akzeit { 

&zeit_holen;

attron(COLOR_PAIR(1));

if ($debugmode eq "jup") {
   addstr(stdscr, 0, 71, "$akzeitd"); }
   else { addstr(stdscr, 0, 74, "$akzeit"); }

if($bsmodus eq 0) {    
  move(24,79);
} else {
  move(49,79);
}

}


###############################################################################
# Statistikmail

sub daily {

local(@Datum, @Uhr, @Uhrzeit);

$digitalanrufe=0; $analoganrufe=0;

$zeit  = time(); 
$zeit  = localtime($zeit);
@Datum = split(/ +/, $zeit); 

&translatemonth;

@Uhr = split(/ +/,$zeit);
@Uhrzeit = split(/:/,$Uhr[3]);

$Datum[2]--;

if (length($Datum[2]) eq 1) { 
   $soso = " $Datum[2]"; 
   $fmist = "0$Datum[2]";
} else { 
   $soso = "$Datum[2]"; 
   $fmist = "$Datum[2]"; 
}

if (length($Datum[2]) ne 1)  { $grrr = "hmpf"; } else { $grrr = "ok"; }

$akdat = "$Datum[1] $soso"; 
$akdatfgate = "$Datum[1] $fmist";

# do..... what?
#
if($dailyuse eq 1) {
  &detailierter_bericht; 
  if ($dailylog eq 1) { &daily_log; }
  if ($send_rfc_mail eq 1) { &send_system_mail } 
}

}


###############################################################################
# Bericht mit allen Details

sub detailierter_bericht {

$anfang = time;

&grep_logfiles;

writem($report, " \n");

writem($report, "Halloele...\n\n");

writem($report, "Statistik fuer $Uhr[0], den $Uhr[2] $Uhr[1] $Uhr[4] -- Erstellt um $Uhrzeit[0]:$Uhrzeit[1] \n\n");
writem($report, "ISDN Anruf(e)   : $digitalanrufe\n");
writem($report, "analoge Anruf(e): $analoganrufe\n");

writem($report, "--------------------\n");

writem($report, "Total           : $totale_anrufe\n\n");
writem($report, "dabei wurden\n");
writem($report, "$gesendetebytes Bytes in $gesendete_files files gesendet\n");
writem($report, "$empfangenebytes Bytes in $empfangene_files files empfangen\n\n");

writem($report, "Mail Statistik:\n");
writem($report, "---------------\n");
writem($report, "verarbeitete Mails  : $empfangene_mails in $empfangene_ungepacktekbytes Kbytes (ungepackt)\n");
writem($report, "verarbeitete Pkts   : $empfangene_pkts\n");
writem($report, "Toss-Geschwindigkeit: $tosser_maildurchsatz[0] Mails/s (durchschnitt)\n\n"); 
writem($report, "Wer hat wieviel bekommen:\n");
writem($report, "-------------------------\n");

$z=-1; for(@hotzenplotz) { if ($z ne "-1") { 
$~=REPORT; writem($report, "$_ $sizes[$z] bytes\n");

$werwas=$werwas . "$_ $sizes[$z] bytes\n"; $z++; } else { $z++; } }

writem($report, "\n\n");
writem($report, "Logfile fuer eingehende Anrufe:\n");
writem($report, "-------------------------------\n");
for (@loginx) { writem($report, "$_\n"); } 

writem($report, "\nLogfile fuer ausgehende Anrufe:\n");
writem($report, "-------------------------------\n");

for $i (@ausgehendeanrufelogfile) { writem($report, "$i\n"); }
writem ($report, "\n\n");

$ende = time; $laufzeit = $ende - $anfang;

writem($report, "Das Erstellen dieser Nachricht dauerte $laufzeit Sekunden.\n\n\n");

if ($testmode ne "ja") { &writemail; }

}



###############################################################################
# Mail an Dingens senden

sub send_system_mail {

open (SYSTEMMAIL, "| mail -s Mail_from_Daily $send_an_wen");
print SYSTEMMAIL "$report"; close (SYSTEMMAIL); 

} 


###############################################################################
# Aktivitaeten mitloggen

sub daily_log { 

open (DAILYLOG, ">>$dailylogfile");

print DAILYLOG "$report";
print DAILYLOG "======================================================================";

close (DAILYLOG);

} 


###############################################################################
# ?

sub writem { $_[0]=$_[0] . $_[1]; }


###############################################################################
# Hilfe

sub help {

print "gff & daily $version\n";
print "FixMe!\n";
print "Folgende Parameter sind moeglich:\n";
print "--statistik   Statistikmail erzeugen\n";
print "--bw          Schwarz-Weis modus\n\n";

}


###############################################################################
# Ergebniss versenden

sub writemail {

$tmpfile="$tmpvz/daily.tmp";

open (REPORT, ">$tmpfile") || die "Konnte $tmpfile nicht oeffnen!";
print REPORT "$report"; close (REPORT); 

system("$writeem -oa $absenderaka -da $empfaengeraka -on $boxname -dn $empfaenger -a $brett -s $titel -mf $tmpfile -tw $outpkt");
system("$tosscommand"); unlink("$tmpfile"); 

} 


###############################################################################
# such .. hasso .. such

sub grep_logfiles {

# Suche alle Eintraege die den aktuellen Tag betreffen aus dem $logfile
#
&greppy("$logfile", "$akdat", " ");


# suche nach empfangenen Bytes
#
$empfangene_files=0; $empfangenebytes=0;
for $i (@greppyergebniss) {
if ($i =~ /zmodem receive: /) { $empfangene_files++; @blubby=split(/ /, $i);
if ($grrr eq "hmpf") { $empfangenebytes=$empfangenebytes + $blubby[8]; } else 
{ $empfangenebytes=$empfangenebytes + $blubby[9]; } } }
 

# suche nach gesendeten Bytes
#
$gesendete_files=0; $gesendetebytes=0;
for $i (@greppyergebniss) { 
if ($i =~ /zmodem send "/) { $gesendete_files++; @blubby=split(/ /, $i);
if ($grrr eq "hmpf") { $blubby[10] =~ s/\(//; } else { $blubby[11] =~ s/\(//; } 
if ($grrr eq "hmpf") { $gesendetebytes=$gesendetebytes + $blubby[10]; } else
{ $gesendetebytes=$gesendetebytes + $blubby[11]; } } }


# eingehende Anrufe 
#

$found=0;

for $i (@greppyergebniss) { 

if ($found eq 1) { @tmpy=split(/\[/, $i); 
                   @tmp=split(/\]/, $tmpy[1]);
		   push(@pids, $tmp[0]);
		   $found=0; 
		   if ($i =~ /ifcico.ttyI2/) { $digitalanrufe++; }
		   if ($i =~ /ifcico.ttyS1/) { $analoganrufe++; }
		   }
		    
if ($i =~ /Eingehender Anruf/) { $found=1; }  }
$z=0; $feddich=0;
for $pidyea (@pids) {
for (@greppyergebniss) { 
  if (/\[$pidyea\]/) 
     { 
     if (/remote operator/) 
        { 
        $tmp=$loginx[$z]; $loginx[$z]=""; 
	@blub=split(/ /, $_);
	if ($grrr eq "hmpf") 
	   {
	   $tmp1="$blub[0] $blub[1] $blub[2] Anruf von $blub[7] $blub[8] $blub[9] $blub[10]";	
	   }
	   else
	   {
	   $tmp1="$blub[0] $blub[1] $blub[2] $blub[3] Anruf von $blub[8] $blub[9] $blub[10] $blub[11]";	
	   }
	chop($tmp1); chop($tmp1); chop($tmp1);
	$loginx[$z]=$loginx[$z] . $tmp1; $loginx[$z]=$loginx[$z] . " ($tmp)"; 
	}	
	elsif(/remote  address: 2:24/)  
	     { 
	     if ($feddich ne 1) 
	        { 
	        @tmp = split(/ /, $_);
		if ($grrr eq "hmpf") 
		{
		chomp($tmp[8]);
	        $loginx[$z]=$loginx[$z] . $tmp[8];
                } 
                else
		{
		chomp($tmp[9]);
	        $loginx[$z]=$loginx[$z] . $tmp[9];
	        }
		$feddich=1; 
		} 
	     }
	     
} } $z++; $feddich=0;}


# Auschnitte der Logfiles erzeugen
# ausgehend
#
&greppy("$logfile", "$akdat", "ifcico");

for $i (@greppyergebniss) {
if ($i =~ /calling /) { @blub=split(/ /, $i);
if ($grrr eq "hmpf") {

$tempy = "$blub[0] $blub[1] $blub[2] $blub[5] $blub[6]";
$temp1 = "$blub[7] $blub[8] $blub[9] $blub[10] $blub[11] $blub[12] $blub[13]";
($temp2, $temp3) = split(/,/, $temp1, 2);
$temp2 =~ s/\(//; chomp($tempy);
$tempy = "$tempy  $temp2";
push(@ausgehendeanrufelogfile, $tempy); }

else {

$tempy = "$blub[0] $blub[1] $blub[2] $blub[3] $blub[6] $blub[7]";
$temp1 = "$blub[8] $blub[9] $blub[10] $blub[11] $blub[12] $blub[13] $blub[14]";
($temp2, $temp3) = split(/,/, $temp1, 2);
$temp2 =~ s/\(//; chomp($tempy);
$tempy = "$tempy  $temp2";
push(@ausgehendeanrufelogfile, $tempy); } } }


# Mailstatistik 
#
&greppy("$fgatelogfile", "$akdatfgate", "ftntoss msgs processed", " mail\, ");

for $i (@greppyergebniss) { @blub = split(/ /, $i);
$empfangene_mails=$empfangene_mails + $blub[6]; }

&greppy("$fgatelogfile", "$akdatfgate", "ftntoss pkts processed", "Kbyte\/s");

$tosser_zaehler=0;

for $i (@greppyergebniss) { @blub = split(/ /, $i);
$blub[6] =~ s/,//; $empfangene_pkts=$empfangene_pkts + $blub[6];
$empfangene_ungepacktekbytes=$empfangene_ungepacktekbytes + $blub[7];
$tosser_mail=$tosser_mail + $blub[12]; $tosser_zaehler++; }

$tosser_temp=$tosser_mail / $tosser_zaehler;
@tosser_maildurchsatz = split(/\./, $tosser_temp);

$totale_anrufe = $digitalanrufe + $analoganrufe;


# Welcher Point hat wieviel bekommen
#
&greppy("$fgatelogfile", "$akdatfgate", "ftnpack archiving packet ");
for $i (@greppyergebniss) { @blub=split(/ /, $i); push (@unsorted, $blub[8]); }
@sort=sort(@unsorted); $sorted[0]=$sort[0]; $baeh=0;
for $i (@sort) { 
if ($i ne $sorted[$baeh]) { push(@sorted, $i); $baeh++; } }

@hotzenplotz=@sorted;

$z=0;
for (@sorted) {
$sorted[$z] =~ s/\:/\\:/;
$sorted[$z] =~ s/\//#/;
$sorted[$z] =~ s/#/\\ /;
$sorted[$z] =~ s/ /\//;
$z++; }

@dingel=@sorted;

$z=0; shift(@dingel);
for(@dingel) {
@haehae=""; 
for $zeile (@greppyergebniss) { 
if ($zeile =~ / $_ /) { push (@haehae, $zeile); } }
$roemer=0;
for (@haehae) { @blub=split(/ /, $_);  
$blub[6] =~ s/\(//; $blub[6] =~ s/\)//; $blub[6] =~ s/b//; 
$roemer=$roemer + $blub[6]; } push(@sizes, $roemer); $z++; }  

}


#Signal Handling
sub sighdnl {

local($sig) = @_;
$sigtermed = $sig;

}


# 25 <-> 50 Zeilen umschaltung
sub zeilenmodus_umschalten {

if($bsmodus eq 0) { 
  if($LINES eq 50) {
    $bsmodus=1;
    clear();
    refresh();
    machma;
    iflogfile_aufbereiten("r");
    letzte_anrufe;
    letzte_i_anrufe;
  }
} elsif($bsmodus eq 1) {
  $bsmodus=0;
  clear();
  refresh();
  machma;
  iflogfile_aufbereiten("r");
  letzte_anrufe;
  letzte_i_anrufe;
}

}


###############################################################################
# Routine zum Durchsuchen von Logfiles, extrem lahm, extrem baeh
# extrem verbesserungswuerdig
#
# ToDo: Schneller machen (am besten neu schreiben)

sub greppy 
{
@dingdong=""; @dingdong1=""; @dingdong2=""; $raehmelaem="";
open (FICK, "$_[0]") || die "Konnte $_[0] nicht oeffnen\n";
while (<FICK>) {
/$_[1]/ ? @dingdong = (@dingdong , $_) : $dingdong[1]=$dingdong[1]; }
  
if ($_[2] ne "") {
foreach $raehmelaem (@dingdong) 
{
if ($raehmelaem =~ /$_[2]/) { @dingdong1 = (@dingdong1 , $raehmelaem) } } }

if ($_[3] ne "") {
foreach $raehmelaeme (@dingdong1) {
if ($raehmelaeme =~ /$_[3]/) { @dingdong2 = (@dingdong2 , $raehmelaeme) }
@greppyergebniss = @dingdong2; } } else { @greppyergebniss = @dingdong1; }
close (FICK);
}


# -=> Hauptprogramm <=- #######################################################


if ($ARGV[0] ne "") {
   if ($ARGV[0] =~ /--statistik/) { 
      &config_auslesen; 
      &daily; 
      exit(0);
   }
   if ($ARGV[0] =~ /--help|-h/) { 
      &help; 
      exit(0);
   } 
}

if($ARGV[0] =~ /-bw|--bw/) { $bw=1; } else { $bw=0; }

#&hello;

$SIG{INT} = \&sighdnl;
$SIG{TERM} = \&sighdnl;

config_auslesen;

#system("setterm -cursor off");

machma;

iflogfile_aufbereiten;

if($systemart eq 0) {
  letzte_anrufe;
  letzte_i_anrufe;
} elsif($systemart eq 1) {
  letzte_anrufe("p");
}



halfdelay(1); 
noecho(); 
eval { keypad(1) };

$ende=0; $zmi=0;


while($ende ne 1) {

     $eingabe=getch();
     
     if($eingabe ne -1) {
       if($eingabe eq 265 || $eingabe eq "h") { nocbreak(); &hilfe; cbreak(); halfdelay(1); }
       if($eingabe eq "r") { nocbreak(); &request; cbreak(); halfdelay(1); }
       if($eingabe eq "q" || $eingabe eq "x") { &ausgang }
       if($eingabe eq "c") { nocbreak(); &call_node; cbreak(); halfdelay(1); }
       if($eingabe eq "p") { &poll_uplink }
       if($eingabe eq "s") { nocbreak(); &show_outbound; cbreak(); halfdelay(1); }  
       if($eingabe eq "n") { &neuaufbau }
       if($eingabe eq "m") { &mailreader_go }
       if($eingabe eq "l") { nocbreak(); &iflogfile_scrollen; cbreak(); halfdelay(1); }
       if($eingabe eq "274") { &menu; cbreak(); halfdelay(1); }
       if($eingabe eq "d") {
         move(24, 77); addstr("D"); refresh(); 
         &daily;
         move(24, 77); addstr(" "); refresh(); 
       }
     }

     $zmi++; $cpuz++; $cpul++;

     if($zmi eq $dley) {
       &akzeit;
       $zmi=0;
       iflogfile_aufbereiten; 
     }

     if($cpul eq $lcalls) {  
       if($useautotoss eq 1) {
         autotoss;
       }	 
       if($systemart eq 0) {
         letzte_anrufe;
         letzte_i_anrufe;
       } elsif($systemart eq 1) {
         letzte_anrufe("p");
       }
       $cpul=0;
       if($akzeit eq "00:00") {
         if($systemart eq 0) { 
           clear($licallwin);
           refresh($licallwin);
           clear($lcallwin); 
           refresh($lcallwin);
         } elsif($systemart eq 1) {
           clear($letzte_anrufe);
           refresh($letzte_anrufe);
         }
       }
       if($dailyuse eq 1) {
         if($dailytime eq $akzeit) {
           move(24,78); addstr("D "); refresh();
           &daily;
           move(stdscr, 24,78); addstr(stdscr, "  "); refresh();
         }
       }    
    } 
    if($sigtermed) {
      last;
      
    }
}

endwin();

print "\naborting. SIG$sigtermed!\n" if $sigtermed;


#system("setterm -cursor on");

#


__END__

ToDo:

-outbound manager 
